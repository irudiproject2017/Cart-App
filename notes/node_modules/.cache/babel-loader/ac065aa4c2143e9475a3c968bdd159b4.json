{"ast":null,"code":"import uuid from 'uuid';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_NOTE':\n      const newNote = {\n        id: uuid,\n        text: action.payload\n      };\n      const addedNotes = [...state.notes, newNote];\n      return { ...state,\n        notes: addedNotes\n      };\n\n    case 'DELETE_NOTE':\n      const deletedNotes = state.notes.filter(note => note.id !== action.payload);\n      return { ...state,\n        notes: deletedNotes\n      };\n\n    case 'SET_CURRENT_NOTE':\n      return { ...state,\n        currentNote: action.payload\n      };\n\n    case 'UPDATE_NOTE':\n      const updatedNote = { ...state.currentNote,\n        text: action.payload\n      };\n      const updatedNotesIndex = state.notes.findIndex(note => note.id === state.currentNote.id);\n      const updatedNotes = [...state.notes.slice(0, updatedNotesIndex), updatedNote, ...state.notes.slice(updatedNotesIndex + 1)];\n      return {\n        currentNote: null,\n        notes: updatedNotes\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/iviswa948/React-Notes-Project-JSX/Notes-App/notes/src/reducer.js"],"names":["uuid","reducer","state","action","type","newNote","id","text","payload","addedNotes","notes","deletedNotes","filter","note","currentNote","updatedNote","updatedNotesIndex","findIndex","updatedNotes","slice"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AACA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AACE,YAAMC,OAAO,GAAG;AACdC,QAAAA,EAAE,EAAEN,IADU;AAEdO,QAAAA,IAAI,EAAEJ,MAAM,CAACK;AAFC,OAAhB;AAKA,YAAMC,UAAU,GAAG,CAAC,GAAGP,KAAK,CAACQ,KAAV,EAAiBL,OAAjB,CAAnB;AAEA,aAAO,EACL,GAAGH,KADE;AAELQ,QAAAA,KAAK,EAAED;AAFF,OAAP;;AAIF,SAAK,aAAL;AACE,YAAME,YAAY,GAAGT,KAAK,CAACQ,KAAN,CAAYE,MAAZ,CACnBC,IAAI,IAAIA,IAAI,CAACP,EAAL,KAAYH,MAAM,CAACK,OADR,CAArB;AAIA,aAAO,EACL,GAAGN,KADE;AAELQ,QAAAA,KAAK,EAAEC;AAFF,OAAP;;AAIF,SAAK,kBAAL;AACE,aAAO,EACL,GAAGT,KADE;AAELY,QAAAA,WAAW,EAAEX,MAAM,CAACK;AAFf,OAAP;;AAIF,SAAK,aAAL;AACE,YAAMO,WAAW,GAAG,EAClB,GAAGb,KAAK,CAACY,WADS;AAElBP,QAAAA,IAAI,EAAEJ,MAAM,CAACK;AAFK,OAApB;AAKA,YAAMQ,iBAAiB,GAAGd,KAAK,CAACQ,KAAN,CAAYO,SAAZ,CACxBJ,IAAI,IAAIA,IAAI,CAACP,EAAL,KAAYJ,KAAK,CAACY,WAAN,CAAkBR,EADd,CAA1B;AAIA,YAAMY,YAAY,GAAG,CACnB,GAAGhB,KAAK,CAACQ,KAAN,CAAYS,KAAZ,CAAkB,CAAlB,EAAqBH,iBAArB,CADgB,EAEnBD,WAFmB,EAGnB,GAAGb,KAAK,CAACQ,KAAN,CAAYS,KAAZ,CAAkBH,iBAAiB,GAAG,CAAtC,CAHgB,CAArB;AAMA,aAAO;AACLF,QAAAA,WAAW,EAAE,IADR;AAELJ,QAAAA,KAAK,EAAEQ;AAFF,OAAP;;AAIF;AACE,aAAOhB,KAAP;AAhDJ;AAkDD,CAnDD;;AAoDA,eAAeD,OAAf","sourcesContent":["import uuid from 'uuid';\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_NOTE':\n      const newNote = {\n        id: uuid,\n        text: action.payload\n      };\n\n      const addedNotes = [...state.notes, newNote];\n\n      return {\n        ...state,\n        notes: addedNotes\n      };\n    case 'DELETE_NOTE':\n      const deletedNotes = state.notes.filter(\n        note => note.id !== action.payload\n      );\n\n      return {\n        ...state,\n        notes: deletedNotes\n      };\n    case 'SET_CURRENT_NOTE':\n      return {\n        ...state,\n        currentNote: action.payload\n      };\n    case 'UPDATE_NOTE':\n      const updatedNote = {\n        ...state.currentNote,\n        text: action.payload\n      };\n\n      const updatedNotesIndex = state.notes.findIndex(\n        note => note.id === state.currentNote.id\n      );\n\n      const updatedNotes = [\n        ...state.notes.slice(0, updatedNotesIndex),\n        updatedNote,\n        ...state.notes.slice(updatedNotesIndex + 1)\n      ];\n\n      return {\n        currentNote: null,\n        notes: updatedNotes\n      };\n    default:\n      return state;\n  }\n}\nexport default reducer"]},"metadata":{},"sourceType":"module"}