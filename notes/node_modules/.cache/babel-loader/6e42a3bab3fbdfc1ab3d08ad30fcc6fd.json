{"ast":null,"code":"import uuid from 'uuid'; // reducer function takes action and based on the action type \n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_NOTE':\n      const newNote = {\n        id: uuid.v4(),\n        // uuid is lib which gives uniq id and v4() is the version\n        text: action.payload\n      };\n      const addedNotes = [...state.notes, newNote]; // adding obj of newNote\n      // updating the notes array with the new note(addedNotes)\n\n      return { ...state,\n        notes: addedNotes\n      };\n    /// filter with the note id to delete the particular note\n\n    case 'DELETE_NOTE':\n      const deletedNotes = state.notes.filter(note => note.id !== action.payload);\n      return { ...state,\n        notes: deletedNotes\n      };\n    ///return the object and spreading the occurance state and getting the payload(note) passed in the action\n    /// updating the current note\n\n    case 'SET_CURRENT_NOTE':\n      return { ...state,\n        currentNote: action.payload\n      };\n\n    case 'UPDATE_NOTE':\n      const updatedNote = { ...state.currentNote,\n        text: action.payload\n      };\n      const updatedNotesIndex = state.notes.findIndex(note => note.id === state.currentNote.id); // new notes array with the updated notes\n\n      const updatedNotes = [...state.notes.slice(0, updatedNotesIndex), // first part of the array pass all the notes and slice u\n      updatedNote, ...state.notes.slice(updatedNotesIndex + 1)];\n      return {\n        currentNote: null,\n        notes: updatedNotes\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/iviswa948/React-Cart-JS-Project/notes/src/reducer.js"],"names":["uuid","reducer","state","action","type","newNote","id","v4","text","payload","addedNotes","notes","deletedNotes","filter","note","currentNote","updatedNote","updatedNotesIndex","findIndex","updatedNotes","slice"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB,C,CACA;;AACA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AACE,YAAMC,OAAO,GAAG;AACdC,QAAAA,EAAE,EAAEN,IAAI,CAACO,EAAL,EADU;AACA;AACdC,QAAAA,IAAI,EAAEL,MAAM,CAACM;AAFC,OAAhB;AAKA,YAAMC,UAAU,GAAG,CAAC,GAAGR,KAAK,CAACS,KAAV,EAAiBN,OAAjB,CAAnB,CANF,CAMgD;AAE9C;;AACA,aAAO,EACL,GAAGH,KADE;AAELS,QAAAA,KAAK,EAAED;AAFF,OAAP;AAIA;;AACF,SAAK,aAAL;AACE,YAAME,YAAY,GAAGV,KAAK,CAACS,KAAN,CAAYE,MAAZ,CACnBC,IAAI,IAAIA,IAAI,CAACR,EAAL,KAAYH,MAAM,CAACM,OADR,CAArB;AAIA,aAAO,EACL,GAAGP,KADE;AAELS,QAAAA,KAAK,EAAEC;AAFF,OAAP;AAIA;AACA;;AACF,SAAK,kBAAL;AACE,aAAO,EACL,GAAGV,KADE;AAELa,QAAAA,WAAW,EAAEZ,MAAM,CAACM;AAFf,OAAP;;AAIF,SAAK,aAAL;AACE,YAAMO,WAAW,GAAG,EAClB,GAAGd,KAAK,CAACa,WADS;AAElBP,QAAAA,IAAI,EAAEL,MAAM,CAACM;AAFK,OAApB;AAKA,YAAMQ,iBAAiB,GAAGf,KAAK,CAACS,KAAN,CAAYO,SAAZ,CACxBJ,IAAI,IAAIA,IAAI,CAACR,EAAL,KAAYJ,KAAK,CAACa,WAAN,CAAkBT,EADd,CAA1B,CANF,CASI;;AACF,YAAMa,YAAY,GAAG,CACnB,GAAGjB,KAAK,CAACS,KAAN,CAAYS,KAAZ,CAAkB,CAAlB,EAAqBH,iBAArB,CADgB,EACwB;AAC3CD,MAAAA,WAFmB,EAGnB,GAAGd,KAAK,CAACS,KAAN,CAAYS,KAAZ,CAAkBH,iBAAiB,GAAG,CAAtC,CAHgB,CAArB;AAMA,aAAO;AACLF,QAAAA,WAAW,EAAE,IADR;AAELJ,QAAAA,KAAK,EAAEQ;AAFF,OAAP;;AAIF;AACE,aAAOjB,KAAP;AApDJ;AAsDD,CAvDD;;AAwDA,eAAeD,OAAf","sourcesContent":["import uuid from 'uuid';\n// reducer function takes action and based on the action type \nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_NOTE':      \n      const newNote = {\n        id: uuid.v4(),// uuid is lib which gives uniq id and v4() is the version\n        text: action.payload\n      };\n\n      const addedNotes = [...state.notes, newNote]; // adding obj of newNote\n\n      // updating the notes array with the new note(addedNotes)\n      return {\n        ...state,\n        notes: addedNotes\n      };\n      /// filter with the note id to delete the particular note\n    case 'DELETE_NOTE':\n      const deletedNotes = state.notes.filter(\n        note => note.id !== action.payload\n      );\n\n      return {\n        ...state,\n        notes: deletedNotes\n      };\n      ///return the object and spreading the occurance state and getting the payload(note) passed in the action\n      /// updating the current note\n    case 'SET_CURRENT_NOTE':\n      return {\n        ...state,\n        currentNote: action.payload\n      };\n    case 'UPDATE_NOTE':\n      const updatedNote = {\n        ...state.currentNote,\n        text: action.payload\n      };\n\n      const updatedNotesIndex = state.notes.findIndex(\n        note => note.id === state.currentNote.id\n      );\n        // new notes array with the updated notes\n      const updatedNotes = [\n        ...state.notes.slice(0, updatedNotesIndex),// first part of the array pass all the notes and slice u\n        updatedNote,\n        ...state.notes.slice(updatedNotesIndex + 1)\n      ];\n\n      return {\n        currentNote: null,\n        notes: updatedNotes\n      };\n    default:\n      return state;\n  }\n}\nexport default reducer"]},"metadata":{},"sourceType":"module"}